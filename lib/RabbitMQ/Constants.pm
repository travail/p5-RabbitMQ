package RabbitMQ::Constants;

use strict;
use parent qw(Exporter);

our @EXPORT_OK = qw(
    AMQP_PROTOCOL_VERSION_MAJOR
    AMQP_PROTOCOL_VERSION_MINOR
    AMQP_PROTOCOL_VERSION_REVISION
    AMQP_PROTOCOL_PORT
    AMQP_FRAME_METHOD
    AMQP_FRAME_HEADER
    AMQP_FRAME_BODY
    AMQP_FRAME_HEARTBEAT
    AMQP_FRAME_MIN_SIZE
    AMQP_FRAME_END
    AMQP_REPLY_SUCCESS
    AMQP_CONTENT_TOO_LARGE
    AMQP_NO_ROUTE
    AMQP_NO_CONSUMERS
    AMQP_ACCESS_REFUSED
    AMQP_NOT_FOUND
    AMQP_RESOURCE_LOCKED
    AMQP_PRECONDITION_FAILED
    AMQP_CONNECTION_FORCED
    AMQP_INVALID_PATH
    AMQP_FRAME_ERROR
    AMQP_SYNTAX_ERROR
    AMQP_COMMAND_INVALID
    AMQP_CHANNEL_ERROR
    AMQP_UNEXPECTED_FRAME
    AMQP_RESOURCE_ERROR
    AMQP_NOT_ALLOWED
    AMQP_NOT_IMPLEMENTED
    AMQP_INTERNAL_ERROR
);

1;

__END__

=head1 NAME

RabbitMQ::Constants - RabbitMQ Constants

=head1 EXPORTS

=head2

=over 4

=item AMQP_PROTOCOL_VERSION_MAJOR

=item AMQP_PROTOCOL_VERSION_MINOR

=item AMQP_PROTOCOL_VERSION_REVISION

=item AMQP_PROTOCOL_PORT

=item AMQP_FRAME_METHOD

=item AMQP_FRAME_HEADER

=item AMQP_FRAME_BODY

=item AMQP_FRAME_HEARTBEAT

=item AMQP_FRAME_MIN_SIZE

=item AMQP_FRAME_END

=item AMQP_REPLY_SUCCESS

=item AMQP_CONTENT_TOO_LARGE

=item AMQP_NO_ROUTE

=item AMQP_NO_CONSUMERS

=item AMQP_ACCESS_REFUSED

=item AMQP_NOT_FOUND

=item AMQP_RESOURCE_LOCKED

=item AMQP_RESOURCE_LOCKED

=item AMQP_PRECONDITION_FAILED

=item AMQP_CONNECTION_FORCED

=item AMQP_INVALID_PATH

=item AMQP_FRAME_ERROR

=item AMQP_SYNTAX_ERROR

=item AMQP_COMMAND_INVALID

=item AMQP_CHANNEL_ERROR

=item AMQP_UNEXPECTED_FRAME

=item AMQP_RESOURCE_ERROR

=item AMQP_NOT_ALLOWED

=item AMQP_NOT_IMPLEMENTED

=item AMQP_INTERNAL_ERROR

=back

=cut
