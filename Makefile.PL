use inc::Module::Install;
use Getopt::Long;
use List::Util qw( first );
use Path::Class qw( dir file );
use Pod::Usage;

my @module = qw(
    Module::Install::AuthorTests
    Module::Install::XSUtil
);
my @missing;
foreach my $module (@module) {
    eval "require $module";
    push @missing, $module if $@;
}
if (@missing) {
    print STDERR <<EOM;
*** Missing Modules ***

EOM
    foreach my $module (@missing) {
        print STDERR "  * $module\n";
    }
    exit 0;
}

my $opt = {};
GetOptions(
    $opt,
    'help|h'
);
pod2usage(1) if $opt->{help};
detect_rmq();
gen_config($opt);
gen_constants_file($opt);
print "Detected the RabbitMQ settings below:\n";
my @setting = qw( RABBITMQ_USER RABBITMQ_PASSWORD
  RABBITMQ_HOST RABBITMQ_PORT RABBITMQ_VHOST RABBITMQ_INCLUDES RABBITMQ_LIBS );
foreach (@setting) {
    printf " + %s = %s\n", $_, $ENV{$_} ? $ENV{$_} : '(null)';
}

name 'RabbitMQ';
all_from 'lib/RabbitMQ.pm';

test_requires 'Test::More';

tests 't/*.t';
author_tests('xt');

use_ppport;
use_xshelper '-clean';
clean_files qw( const-xs.inc t/lib );
cc_warnings;
cc_include_paths split /\s+/, $ENV{RABBITMQ_INCLUDES};
cc_libs $ENV{RABBITMQ_LIBS};
cc_libs 'rabbitmq';

WriteAll;

sub detect_rmq {
    my @includes;
    if ($ENV{RABBITMQ_INCLUDES}) {
        push @includes, split /\s+/, $ENV{RABBITMQ_INCLUDES};
    }
    else {
        print " + Could not detect RABBITMQ_INCLUDES\n";
        push @includes, qw(/usr/include /usr/local/include);
    }

    if (@includes) {
        $ENV{RABBITMQ_INCLUDES} = join ' ', @includes;
    }

    my @libs;
    if ($ENV{RABBITMQ_LIBS}) {
        push @libs, split /\s+/,  $ENV{RABBITMQ_LIBS};
    }
    else {
        print " + Could not detect RABBITMQ_LIBS\n";
        push @libs, qw(-L/usr/lib -L/usr/local/lib);
    }

    if (@libs) {
        $ENV{RABBITMQ_LIBS} = join ' ', @libs;
    }
}

sub gen_config {
    my $opt = shift;

    my $dir = dir( 't', 'lib', 'Test', 'RabbitMQ' );
    $dir->mkpath;
    my $file = $dir->file('Config.pm');
    my $fh = $file->openw or die "Could not open file $file: $!";

    $ENV{RABBITMQ_USER}     ||= 'guest';
    $ENV{RABBITMQ_PASSWORD} ||= 'guest';
    $ENV{RABBITMQ_HOST}     ||= 'dev.rabbitmq.com';
    $ENV{RABBITMQ_PORT}     ||= 5672;
    $ENV{RABBITMQ_VHOST}    ||= '/';

    print $fh <<EOM;
package Test::RabbitMQ::Config;

# Do not edit this file. This file was automatically generated
# by Makefile.PL on @{[scalar localtime]}. If you want to
# regenerate it, remove this file and re-run Makefile.PL

use strict;
use warnings;
use base 'Exporter';

our \@EXPORT = qw( USER PASSWORD HOST PORT VHOST );

use constant USER     => \'$ENV{RABBITMQ_USER}\';
use constant PASSWORD => \'$ENV{RABBITMQ_PASSWORD}\';
use constant HOST     => \'$ENV{RABBITMQ_HOST}\';
use constant PORT     => \'$ENV{RABBITMQ_PORT}\';
use constant VHOST    => \'$ENV{RABBITMQ_VHOST}\';

1;

__END__
EOM
}

sub gen_constants_file {
    my $header = first { -f $_ } (
        map { file( $_, 'amqp_framing.h' )->stringify }
          split( /\s+/, $ENV{RABBITMQ_INCLUDES} )
    );

    my $in     = file($header);
    my $out    = file('const-xs.inc');
    my $fh_in  = $in->openr or die "Could not open file $in: $!";
    my $fh_out = $out->openw or die "Could not open file $out: $!";

    print $fh_out
        "# Do not edit this file. This file was automatically generated\n",
        "# by Makefile.PL on @{[scalar localtime]}. If you want to\n",
        "# regenerate it, remove this file and re-run Makefile.PL\n",
        "\n",
        "IV\n",
        "_constant()\n",
        "    ALIAS:\n",
    ;
    while ( my $line = <$fh_in> ) {
        chomp $line;
        if ( $line =~ /^\#define\s+(AMQP_[A-Z0-9_]+)\s+([\d])/ ) {
            print $fh_out "        $1 = $1\n";
        }
    }
    print $fh_out
        "    CODE:\n",
        "        RETVAL = ix;\n",
        "    OUTPUT:\n",
        "        RETVAL\n"
    ;
    $fh_in->close;
    $fh_out->close;
}

__END__

=head1 NAME

Makefile.PL

=head1 SYNOPSIS

ENVIRONMENT_VARIAVLE='your setting' Makefile.PL [option]

=head2 OPTIONS

  -h --help       show this message

=head2 ENVIRONMENT VARIABLES

You can specify the environment variables below to configure the build
parameters.

=over

=item RABBITMQ_USER

The user name used for tests. C<guest> by default.

=item RABBITMQ_PASSWORD

The password used for tests. C<guest> by default.

=item RABBITMQ_HOST

The RabbitMQ node IP address or host name used for tests. C<dev.rabbitmq.com> by default.

=item RABBITMQ_PORT

The RabbitQM node port used for tests. C<5672> by default.

=item RABBITMQ_VHOST

The RabbitMQ virtual host used for tests. C</> by default.

=item RABBITMQ_INCLUDES

The path to the directories where amqp.h and amqp_framing.h are installed. C</usr/include /usr/local/include> by default.

=item RABBITMQ_LIBS

The path to the direcotries where librabbitmq are installed. C<-L/usr/lib -L/usr/lib> by default.

=back

=cut
